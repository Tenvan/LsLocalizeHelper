<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=ArrangeTrailingCommaInMultilineLists/@EntryIndexedValue">DO_NOT_SHOW</s:String>
	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=ArrangeTrailingCommaInSinglelineLists/@EntryIndexedValue">SUGGESTION</s:String>
	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=Asp_002ESkinNotResolved/@EntryIndexedValue">HINT</s:String>
	<s:String x:Key="/Default/CodeInspection/Highlighting/InspectionSeverities/=InconsistentNaming/@EntryIndexedValue">HINT</s:String>
	<s:Boolean x:Key="/Default/CodeInspection/Roslyn/LegacySeveritiesMigrated/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeCleanup/RecentlyUsedProfile/@EntryValue">Built-in: Full Cleanup</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeCleanup/SilentCleanupProfile/@EntryValue">Built-in: Reformat Code</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CommonFormatter/SHOW_AUTODETECT_CONFIGURE_FORMATTING_TIP/@EntryValue">False</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/StaticQualifier/STATIC_MEMBERS_QUALIFY_MEMBERS/@EntryValue">Field, Property, Event, Method</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpCodeStyle/ThisQualifier/INSTANCE_MEMBERS_QUALIFY_MEMBERS/@EntryValue">Field, Property, Event, Method</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_FIRST_ARG_BY_PAREN/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_LINQ_QUERY/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_ARGUMENT/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_BINARY_PATTERNS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_CALLS_CHAIN/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_EXPRESSION/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_EXTENDS_LIST/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_FOR_STMT/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_LIST_PATTERN/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_PARAMETER/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_PROPERTY_PATTERN/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_SWITCH_EXPRESSION/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTIPLE_DECLARATION/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTLINE_TYPE_PARAMETER_CONSTRAINS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTLINE_TYPE_PARAMETER_LIST/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_TUPLE_COMPONENTS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALLOW_FAR_ALIGNMENT/@EntryValue">True</s:Boolean>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AFTER_CASE/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AFTER_CONTROL_TRANSFER_STATEMENTS/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AFTER_MULTILINE_STATEMENTS/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_ACCESSOR/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_BLOCK_CASE_SECTION/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_MULTILINE_CASE_SECTION/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_SINGLE_LINE_AUTO_PROPERTY/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_SINGLE_LINE_FIELD/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_SINGLE_LINE_LOCAL_METHOD/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_AROUND_SINGLE_LINE_PROPERTY/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BEFORE_BLOCK_STATEMENTS/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BEFORE_CASE/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BEFORE_CONTROL_TRANSFER_STATEMENTS/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BEFORE_MULTILINE_STATEMENTS/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BEFORE_SINGLE_LINE_COMMENT/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BETWEEN_USING_GROUPS/@EntryValue">1</s:Int64>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/EMPTY_BLOCK_STYLE/@EntryValue">TOGETHER_SAME_LINE</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_CHOP_COMPOUND_DO_EXPRESSION/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_CHOP_COMPOUND_IF_EXPRESSION/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_CHOP_COMPOUND_WHILE_EXPRESSION/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_ANONYMOUS_METHOD_BLOCK/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_PREPROCESSOR_IF/@EntryValue">USUAL_INDENT</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_PREPROCESSOR_OTHER/@EntryValue">USUAL_INDENT</s:String>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_SIZE/@EntryValue">2</s:Int64>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_ASSIGNMENTS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_COMMENTS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_FIELDS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_METHODS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_NESTED_TERNARY/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_PARAMETERS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_PROPERTIES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_PROPERTY_PATTERNS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_SWITCH_EXPRESSIONS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_SWITCH_SECTIONS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INT_ALIGN_VARIABLES/@EntryValue">True</s:Boolean>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_CODE/@EntryValue">0</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_DECLARATIONS/@EntryValue">1</s:Int64>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_EXISTING_DECLARATION_PARENS_ARRANGEMENT/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_EXISTING_SWITCH_EXPRESSION_ARRANGEMENT/@EntryValue">False</s:Boolean>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/MAX_FORMAL_PARAMETERS_ON_LINE/@EntryValue">3</s:Int64>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue">IF_OWNER_IS_SINGLE_LINE</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue">IF_OWNER_IS_SINGLE_LINE</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_ACCESSORHOLDER_ON_SINGLE_LINE/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_EMBEDDED_BLOCK_ON_SAME_LINE/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_ENUM_ON_SINGLE_LINE/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_METHOD_ON_SINGLE_LINE/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_SWITCH_EXPRESSION_ON_SINGLE_LINE/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue">IF_OWNER_IS_SINGLE_LINE</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_WHILE_ON_NEW_LINE/@EntryValue">True</s:Boolean>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/TAB_WIDTH/@EntryValue">2</s:Int64>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_AFTER_DECLARATION_LPAR/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_AFTER_INVOCATION_LPAR/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_ARGUMENTS_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_ARRAY_INITIALIZER_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_ARROW_WITH_EXPRESSIONS/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_BINARY_OPSIGN/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_DECLARATION_RPAR/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_INVOCATION_RPAR/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_BEFORE_LINQ_EXPRESSION/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_CHAINED_BINARY_EXPRESSIONS/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_CHAINED_BINARY_PATTERNS/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_CHAINED_METHOD_CALLS/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_ENUM_DECLARATION/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_EXTENDS_LIST_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LIST_PATTERN/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_PARAMETERS_STYLE/@EntryValue">CHOP_ALWAYS</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_SWITCH_EXPRESSION/@EntryValue">CHOP_IF_LONG</s:String>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/XmlDocFormatter/INDENT_SIZE/@EntryValue">2</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/XmlDocFormatter/TAB_WIDTH/@EntryValue">2</s:Int64>
	<s:String x:Key="/Default/CodeStyle/CSharpFileLayoutPatterns/Pattern/@EntryValue">&lt;Patterns xmlns="urn:schemas-jetbrains-com:member-reordering-patterns"&gt;
    &lt;!-- Infoniqa OneTime File Layout --&gt;
    &lt;FilePattern RemoveRegions="All"&gt;
        &lt;Entry DisplayName="Entry Region All"&gt;
            &lt;Entry.Match&gt;

            &lt;/Entry.Match&gt;
            &lt;Entry.SortBy&gt;
                &lt;Name Direction="Ascending"/&gt;
            &lt;/Entry.SortBy&gt;
        &lt;/Entry&gt;
    &lt;/FilePattern&gt;

    &lt;TypePattern DisplayName="Default Pattern" RemoveRegions="All"&gt;

        &lt;Region Name="Public Enums"&gt;
            &lt;Entry DisplayName="Public Enums"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Access Is="Public"/&gt;
                        &lt;Kind Is="Enum"/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Constants"&gt;
            &lt;Entry DisplayName="Constants"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Constant"/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;!-- Static Block --&gt;
        &lt;Region Name="Static Fields"&gt;
            &lt;Entry DisplayName="Static Fields"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Field"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Static Constructors"&gt;
            &lt;Entry DisplayName="Static Constructors"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Constructor"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Static Destructor"&gt;
            &lt;Entry DisplayName="Static Destructor"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Destructor"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Static Delegates"&gt;
            &lt;Entry DisplayName="Static Delegates" Priority="100"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Delegate"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Static Indexers"&gt;
            &lt;Entry DisplayName="Static Indexers"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Indexer"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Static Properties"&gt;
            &lt;Entry DisplayName="Static Properties"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Property"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Static Methods"&gt;
            &lt;Entry DisplayName="Static Methods"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Method"/&gt;
                        &lt;Static/&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="All Other Static Members"&gt;
            &lt;Entry DisplayName="All Other Static Members"&gt;
                &lt;Entry.Match&gt;
                    &lt;Static/&gt;
                &lt;/Entry.Match&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;!-- Non Static Block --&gt;
        &lt;Region Name="Fields"&gt;
            &lt;Entry DisplayName="Fields"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Field"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Constructors"&gt;
            &lt;Entry DisplayName="Constructors"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Constructor"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Destructor"&gt;
            &lt;Entry DisplayName="Destructor"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Destructor"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Delegates"&gt;
            &lt;Entry DisplayName="Delegates" Priority="100"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Delegate"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Indexers"&gt;
            &lt;Entry DisplayName="Indexers"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Indexer"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Properties"&gt;
            &lt;Entry DisplayName="Properties"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Property"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Methods"&gt;
            &lt;Entry DisplayName="Methods"&gt;
                &lt;Entry.Match&gt;
                    &lt;And&gt;
                        &lt;Kind Is="Method"/&gt;
                        &lt;Not&gt;
                            &lt;Static/&gt;
                        &lt;/Not&gt;
                    &lt;/And&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Readonly/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="All Other Members"&gt;
            &lt;Entry DisplayName="All Other Static Members"&gt;
                &lt;Entry.Match&gt;
                    &lt;Not&gt;
                        &lt;Static/&gt;
                    &lt;/Not&gt;
                &lt;/Entry.Match&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Nested structs: ${0}"&gt;
            &lt;Entry DisplayName="Nested Structs"&gt;
                &lt;Entry.Match&gt;
                    &lt;Kind Is="Struct"/&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;

        &lt;Region Name="Nested types: ${0}"&gt;
            &lt;Entry DisplayName="Nested Types"&gt;
                &lt;Entry.Match&gt;
                    &lt;Kind Is="Type"/&gt;
                &lt;/Entry.Match&gt;
                &lt;Entry.SortBy&gt;
                    &lt;Static/&gt;
                    &lt;Access Order="public,internal,protected internal,protected,private"/&gt;
                    &lt;Name/&gt;
                &lt;/Entry.SortBy&gt;
            &lt;/Entry&gt;
        &lt;/Region&gt;
    &lt;/TypePattern&gt;
&lt;/Patterns&gt;

</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CSharpVarKeywordUsage/PreferExplicitDiscardDeclaration/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CSharpVarKeywordUsage/PreferSeparateDeconstructedVariablesDeclaration/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CSharpVarKeywordUsage/UseRoslynLogicForEvidentTypes/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/EncapsulateField/MakeFieldPrivate/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/EncapsulateField/UpdateExternalUsagesOnly/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/EncapsulateField/UseAutoProperty/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/Generate/=EqualityMembers/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/Generate/=EqualityMembers/Options/=EqualityOperators/@EntryIndexedValue">False</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/Naming/CSharpAutoNaming/IsNotificationDisabled/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/Naming/CSharpNaming/ApplyAutoDetectedRules/@EntryValue">False</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/XamlStyler/AttributeOrderingRuleGroups/@EntryValue">x:Class
xmlns, xmlns:x
xmlns:*
x:Key, Key, x:Name, Name, x:Uid, Uid, Title
Grid.Row, Grid.RowSpan, Grid.Column, Grid.ColumnSpan, Canvas.Left, Canvas.Top, Canvas.Right, Canvas.Bottom
Width, Height, MinWidth, MinHeight, MaxWidth, MaxHeight
Margin, Padding, HorizontalAlignment, VerticalAlignment, HorizontalContentAlignment, VerticalContentAlignment, Panel.ZIndex
*:*, *
PageSource, PageIndex, Offset, Color, TargetName, Property, Value, StartPoint, EndPoint
mc:Ignorable, d:IsDataSource, d:LayoutOverrides, d:IsStaticText
Storyboard.*, From, To, Duration</s:String>
	<s:String x:Key="/Default/CodeStyle/XamlStyler/ConfigPath/@EntryValue"></s:String>
	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue">True</s:Boolean></wpf:ResourceDictionary>