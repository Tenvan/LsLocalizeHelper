---
name: On Push Tags 

on:
  push:
    tags:
      - v*

env:
  repositoryName: ${{ github.repository }}
  releaseName: ${{ github.ref_name }}
  projectFile: ./LsLocalizeHelper/LsLocalizeHelper.csproj
  solutionFile: ./LsLocalizeHelper.sln

jobs:
  test:
    environment: dev
    runs-on: windows-latest
    
    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]
        dotnet-framework: [ 'net6.0-windows', 'net7.0-windows', 'net8.0-windows', 'net472', 'net481' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.solutionFile }}

      - name: Build
        run: dotnet build ${{ env.solutionFile }} --configuration Release --no-restore --verbosity minimal

      - name: Test
        run: dotnet test ${{ env.solutionFile }} --no-restore --verbosity normal
  
  build:
    needs: test
    permissions: write-all
    name: print-token
    environment: dev
    
    runs-on: windows-latest
    
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
        framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]

    env:
      targetFile: release-${{ matrix.framework }}-${{ github.ref_name }}.zip
      publishFolder: ./.publish/${{ matrix.framework }}

    steps:
    - name: Print Environment
      run: |
        Write-Output 'repositoryName: ${{ env.repositoryName }}'
        Write-Output 'releaseName...: ${{ env.releaseName }}'
        Write-Output 'projectFile...: ${{ env.projectFile }}'
        Write-Output 'targetFile....: ${{ env.targetFile }}'  
        Write-Output 'publishFolder.: ${{ env.publishFolder }}'
        
        $repositoryName = "${{ github.repository }}".Split('/')[1]
        echo "Repository name is $repositoryName"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.solutionFile }}

    - name: Build
      run: dotnet build ${{ env.solutionFile }} --configuration Release --no-restore --verbosity minimal

    - name: Publish 
      run: dotnet publish ${{ env.projectFile }} --configuration Release --no-build --output ${{ env.publishFolder }} --framework ${{ matrix.framework }}

    - name: Zip the publish directory
      run: Compress-Archive -Path ${{ env.publishFolder }}/* -DestinationPath ./${{ env.targetFile }}

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if ((gh release view ${{ env.releaseName }}) -ne $null) {
          Write-Output 'Release ${{ env.releaseName }} exists'
        } else {
          Write-Output 'Release ${{ env.releaseName }} does not exist, creating...'
          gh release create '${{ env.releaseName }}' --title='${{ env.repositoryName }} Release ${{ env.releaseName }}' --draft --prerelease --generate-notes --notes-file ./RELEASE.MD
        }

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ env.releaseName }} ${{ env.targetFile }}
