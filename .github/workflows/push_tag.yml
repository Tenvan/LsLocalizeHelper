---
name: On Push Tags 

on:
  push:
    tags:
      - v*

jobs:
  test:
    environment: dev
    runs-on: windows-latest

    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]
        dotnet-framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

#      - name: Setup .NET ${{ matrix.dotnet-version }}
#        uses: actions/setup-dotnet@v3
#        with:
#          dotnet-version: ${{ matrix.dotnet-version }}
#          
#      - name: Restore dependencies
#        run: dotnet restore LsLocalizeHelper.sln
#
#      - name: Build
#        run: dotnet build LsLocalizeHelper.sln --configuration Release --no-restore --verbosity minimal
#
#      - name: Test
#        run: dotnet test LsLocalizeHelper.sln --no-restore --verbosity normal
  
  build:
    needs: test
    permissions: write-all
    name: print-token
    environment: dev
    
    runs-on: windows-latest
    
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
        framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]

    env: 
      framework: ${{ matrix.framework }}
      repositoryName: $env:GITHUB_REPOSITORY.Split('/')[1]
      githubRefName: $env:GITHUB_REF_NAME
      releaseName: ${{ github.ref_name }}    
      projectFile: ./LsLocalizeHelper/LsLocalizeHelper.csproj
      targetFile: release-${{ matrix.framework }}-${{ github.ref_name }}.zip
      publishFolder: ./.publish/${{ matrix.framework }}

    steps:
    - name: Print Environment
      run: |
        Write-Output 'framework 1: $framework'
        Write-Output 'framework 2: $env:framework'
        Write-Output 'framework 3: ${{ env.framework }}'
        Write-Output 'repositoryName 1: $repositoryName'
        Write-Output 'repositoryName 2: $env:repositoryName'
        Write-Output 'repositoryName 3: ${{ env.repositoryName }}'
        Write-Output 'githubRefName 1: $githubRefName'
        Write-Output 'githubRefName 2: $env:githubRefName'
        Write-Output 'githubRefName 3: ${{ env.githubRefName }}'
        Write-Output 'releaseName 1: $releaseName'
        Write-Output 'releaseName 2: $env:releaseName'
        Write-Output 'releaseName 3: ${{ env.releaseName }}'
        Write-Output 'projectFile 1: $projectFile'
        Write-Output 'projectFile 2: $env:projectFile'
        Write-Output 'projectFile 3: ${{ env.projectFile }}'
        Write-Output 'targetFile 1: $targetFile'  
        Write-Output 'targetFile 2: $env:targetFile'  
        Write-Output 'targetFile 3: ${{ env.targetFile }}'  
        Write-Output 'publishFolder 1: $publishFolder'  
        Write-Output 'publishFolder 2: $env:publishFolder'  
        Write-Output 'publishFolder 3: ${{ env.publishFolder }}'  

        Write-Output 'tag: $env:tag'
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore LsLocalizeHelper.sln

    - name: Build
      run: dotnet build LsLocalizeHelper.sln --configuration Release --no-restore --verbosity minimal

    - name: Publish 
      run: dotnet publish ${{ env.projectFile }} --configuration Release --no-build --output ${{ env.publishFolder }} --framework ${{ matrix.framework }}

    - name: Zip the publish directory
      run: Compress-Archive -Path ${{ env.publishFolder }}/* -DestinationPath ./$env:targetFile

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $repositoryName = $env:GITHUB_REPOSITORY.Split('/')[1]

        Write-Output 'ReleaseName: $env:releaseName'
        Write-Output 'repositoryName: $env:repositoryName'
        Write-Output 'tag: $env:tag'

        if ((gh release view $env:releaseName) -ne $null) {
          Write-Output 'Release $env:releaseName exists'
        } else {
          Write-Output 'Release $env:releaseName does not exist, creating...'
          gh release create '$env:releaseName' --title='$env:repositoryName $env:releaseName' --draft --prerelease --generate-notes --notes-file ./RELEASE.MD
        }

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload $env:releaseName $env:targetFile
