---
name: On Push Tags 

on:
  push:
    tags:
      - v*

jobs:
  test:
    environment: dev
    runs-on: windows-latest

    strategy:
      matrix:
        dotnet-version: [ '6.0.x', '7.0.x' ]
        dotnet-framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          
      - name: Restore dependencies
        run: dotnet restore LsLocalizeHelper.sln

      - name: Build
        run: dotnet build LsLocalizeHelper.sln --configuration Release --no-restore --verbosity minimal

      - name: Test
        run: dotnet test LsLocalizeHelper.sln --no-restore --verbosity normal
  
  build:
    permissions: write-all
    name: print-token
    environment: dev
    
    runs-on: windows-latest
    
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
        framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]

    env: 
      target_file: ${{ github.ref == 'refs/heads/main' && 'release' || 'nightly' }}-${{ matrix.framework }}-${{ github.ref_name }}.zip
      publish-dir: ./.publish/${{ matrix.framework }}
      project-file: ./LsLocalizeHelper/LsLocalizeHelper.csproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore LsLocalizeHelper.sln

    - name: Build
      run: dotnet build LsLocalizeHelper.sln --configuration Release --no-restore --verbosity minimal

    - name: Publish 
      run: dotnet publish ${{ env.project-file }} --configuration Release --no-build --output ${{ env.publish-dir }} --framework ${{ matrix.framework }}

    - name: Zip the publish directory
      run:  zip -r ./${{ env.target_file }} ${{ env.publish-dir }}/* 

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
      run: |
        if gh release view "${{ github.ref_name }}" > /dev/null 2>&1 ; then
          echo "Release ${{ github.ref_name }} exists"
        else
          echo "Release ${{ github.ref_name }} does not exist, creating..."
          gh release create "${{ github.ref_name }}" \
          --title="${GITHUB_REPOSITORY#*/} ${{ github.ref_name }}" \
          --generate-notes \
          --notes-file ./RELEASE.MD \ 
          --draft \
          --prerelease
        fi

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
      run: |
        gh release upload "${{ github.ref_name }}" \
        ${{ env.target_file }}
