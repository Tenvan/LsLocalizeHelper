---
name: LsLocalHelper.NET

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test:
    environment: dev
    runs-on: windows-latest      
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore Bg3LocaHelper.sln

      - name: Build
        run: dotnet build Bg3LocaHelper.sln --configuration Release --no-restore --verbosity minimal

      - name: Test
        run: dotnet test Bg3LocaHelper.sln --no-restore --verbosity normal
  
  build:
    needs: test 
    permissions: write-all
    name: print-token
    environment: dev
    
    runs-on: ubuntu-latest
    
    env: 
      asset-file: ${{ github.ref == 'refs/heads/main' && 'release' || 'nightly' }}-${{ matrix.dotnet-framework }}-${{ matrix.dotnet-version }}.zip
      publish-dir: ./.publish/${{ matrix.dotnet-framework }}
      project-file: ./LSLocalizeHelper/LSLocalizeHelper.csproj
      
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
#        dotnet-framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]
        dotnet-framework: [ 'net6.0-windows' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: package_version
      uses: KageKirin/get-csproj-version@v1.0.0
      with:
#        file: ${{ env.project-file }}
        file: ./Directory.Build.props
        
    - name: Get new tag
      env:
        new_tag: ${{ steps.package_version.outputs.version }}
      run: |
        echo "NEW_TAG=v${{ env.new_tag }}" >> $GITHUB_ENV
        echo "ASSET_FILE=${{ github.ref == 'refs/heads/main' && 'release' || 'nightly' }}-${{ matrix.dotnet-framework }}-${{ matrix.dotnet-version }}-${{ env.new_tag }}.zip" >> $GITHUB_ENV
        echo "NEW_TAG = ${{ env.NEW_TAG }}" 
        echo "ASSET_FILE= ${{ env.ASSET_FILE }}" 
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore Bg3LocaHelper.sln

    - name: Build
      run: dotnet build Bg3LocaHelper.sln --configuration Release --no-restore --verbosity minimal
      
    - name: Publish 
      run: dotnet publish ${{ env.project-file }} --configuration Release --no-build --output ${{ env.publish-dir }} --framework ${{ matrix.dotnet-framework }}

    - name: Zip the publish directory
#      run: Compress-Archive -Path ${{ env.publish-dir }}/* -DestinationPath ./${{ env.asset-file }}
      run:  zip -r ./$ASSET_FILE ${{ env.publish-dir }}/* 
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Dieses Token wird von den GitHub Actions bereitgestellt
      with:
        tag_name: $NEW_TAG
        release_name: Release $NEW_TAG
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./$ASSET_FILE
        asset_name: ${{ env.asset-file }}
        asset_content_type: application/octet-stream
