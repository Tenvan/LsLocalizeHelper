# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: LsLocalHelper.NET

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:
    runs-on: windows-latest
    
    env: 
      asset-file: ${{ github.ref == 'refs/heads/main' && 'release' || 'nightly' }}-${{ matrix.dotnet-framework }}-${{ matrix.dotnet-version }}.zip
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
        dotnet-framework: [ 'net6.0-windows' ]
#        dotnet-framework: [ 'net6.0-windows', 'net7.0-windows', 'net472', 'net481' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Restore dependencies
      run: dotnet restore Bg3LocaHelper.sln
      
    - name: Build
      run: dotnet build Bg3LocaHelper.sln --configuration Release --no-restore --verbosity minimal
      
    - name: Test
      run: dotnet test Bg3LocaHelper.sln --no-restore --verbosity normal    
      
    - name: Publish 
      run: dotnet publish ./LSLocalizeHelper/LSLocalizeHelper.csproj --configuration Release --no-build --output ./.publish/${{ matrix.dotnet-framework }} --framework ${{ matrix.dotnet-framework }}

    - name: Zip the publish directory
      run: |
        cd ./publish
        zip -r ${{ env.asset-file }} ./*
        cd ..
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Dieses Token wird von den GitHub Actions bereitgestellt
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.asset-file }}
        asset_name: ${{ env.asset-file }}
        asset_content_type: application/octet-stream
